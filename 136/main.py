'''
(x+a)^2-x^2-(x-a)^2
=x^2+2ax+a^2-x^2-x^2+2ax-a^2
=-x^2+4ax = n
x^2-4ax+n = 0
  sqrt(16aa-4n)/2 = sqrt(4a^2-n)

x=2a+- sqrt(4a^2-n)
2a-i<a
i>a
4a^2-n>a^2
3a^2>n
4a^2-n>=a*a
4a^2-a>=n
a*(4a-1)>=n

2a

34^2 − 27^2 − 20^2 = 12^2 − 9^2 − 6^2 = 27
2*3-27<3
4*3^2-27
=36-27=9
a=3 i=3


2a-m<=a
a*a<4*a*a-n
n<3*a*a

{3: 1, 15: 3, 35: 3, 63: 3, 99: 3, 12: 1, 32: 2, 60: 3, 96: 3, 7: 1, 27: 2, 55: 2, 91: 2, 20: 1, 48: 1, 84: 3, 11: 1, 39: 2, 75: 2, 28: 1, 64: 1, 51: 1, 95: 1, 36: 1, 80: 1, 19: 1, 44: 1, 23: 1, 52: 1, 87: 1, 31: 1, 68: 1, 76: 1, 43: 1, 92: 1, 47: 1}
{3: 1, 15: 3, 12: 1, 7: 1, 35: 3, 32: 2, 27: 2, 20: 1, 11: 1, 63: 4, 60: 3, 55: 3, 48: 1, 39: 2, 28: 1, 99: 4, 96: 3, 91: 3, 84: 3, 75: 3, 64: 1, 51: 2, 36: 1, 19: 1, 95: 2, 80: 1, 44: 1, 23: 1, 52: 1, 87: 2, 31: 1, 68: 1, 76: 1, 43: 1, 92: 1, 47: 1, 59: 1, 67: 1, 71: 1, 79: 1, 83: 1}

51 = 22  17 12
51 = 64 51 38 a = 13,   4*13*13-51=25*25
{3: 1, 15: 3, 12: 1, 7: 1, 35: 3, 32: 2, 27: 2, 20: 1, 11: 1, 63: 4, 60: 3, 55: 3, 48: 1, 39: 2, 28: 1, 99: 4, 96: 3, 91: 3, 84: 3, 75: 3, 64: 1, 51: 2, 36: 1, 19: 1, 143: 3, 140: 3, 135: 5, 128: 3, 119: 3, 108: 2, 95: 2, 80: 1, 44: 1, 23: 1, 195: 5, 192: 4, 187: 3, 180: 4, 171: 4, 160: 3, 147: 3, 132: 2, 115: 2, 52: 1, 255: 5, 252: 4, 247: 3, 240: 3, 231: 5, 220: 3, 207: 4, 175: 3, 156: 2, 112: 1, 87: 2, 31: 1, 323: 3, 320: 4, 315: 7, 308: 3, 299: 3, 288: 4, 275: 4, 260: 3, 243: 3, 224: 2, 203: 2, 155: 2, 68: 1, 399: 5, 396: 4, 391: 3, 384: 6, 375: 5, 364: 3, 351: 5, 336: 3, 319: 3, 300: 3, 279: 3, 256: 2, 204: 2, 144: 1, 111: 2, 76: 1, 483: 5, 480: 5, 475: 4, 468: 4, 459: 5, 448: 4, 435: 5, 420: 5, 403: 3, 363: 3, 340: 2, 259: 2, 228: 2, 123: 2, 43: 1, 575: 3, 572: 3, 567: 5, 560: 3, 551: 2, 540: 5, 527: 2, 512: 4, 495: 6, 476: 3, 455: 5, 432: 2, 407: 2, 380: 2, 287: 2, 215: 2, 176: 1, 92: 1, 47: 1, 675: 6, 672: 5, 667: 2, 660: 5, 651: 4, 640: 6, 627: 4, 612: 4, 595: 4, 576: 5, 555: 4, 532: 3, 507: 2, 451: 2, 387: 3, 352: 2, 276: 2, 235: 2, 100: 1, 783: 4, 780: 5, 775: 3, 768: 6, 759: 4, 748: 3, 735: 6, 720: 4, 703: 2, 684: 4, 663: 4, 615: 4, 588: 3, 559: 1, 528: 2, 460: 2, 423: 3, 343: 2, 208: 1, 159: 2, 899: 2, 896: 5, 891: 5, 884: 3, 875: 4, 864: 5, 851: 2, 836: 3, 819: 6, 800: 4, 779: 2, 756: 5, 731: 2, 704: 4, 644: 2, 611: 1, 539: 2, 500: 2, 416: 2, 371: 2, 324: 2, 116: 1, 59: 1, 999: 4, 988: 2, 975: 6, 960: 8, 943: 2, 924: 5, 903: 4, 880: 3, 855: 6, 828: 4, 799: 2, 700: 3, 624: 2, 583: 1, 348: 2, 295: 2, 183: 2, 124: 1, 987: 4, 931: 3, 900: 5, 867: 2, 832: 3, 795: 3, 715: 3, 580: 2, 531: 2, 427: 2, 372: 2, 67: 1, 972: 3, 935: 3, 812: 2, 767: 1, 671: 1, 620: 2, 335: 2, 272: 1, 71: 1, 915: 3, 868: 2, 603: 2, 544: 2, 355: 2, 219: 2, 148: 1, 871: 1, 816: 2, 639: 2, 511: 1, 444: 2, 304: 1, 79: 1, 980: 2, 923: 1, 803: 1, 740: 2, 608: 2, 395: 2, 164: 1, 83: 1, 912: 2, 847: 2, 711: 2, 492: 2, 415: 2, 172: 1, 820: 2, 747: 2, 516: 2, 267: 2, 860: 2, 623: 1, 368: 1, 188: 1, 979: 1, 736: 2, 564: 2, 291: 2, 196: 1, 940: 2, 679: 1, 400: 1, 303: 2, 103: 1, 707: 1, 515: 1, 212: 1, 107: 1, 927: 2, 636: 2, 535: 1, 327: 2, 963: 2, 763: 1, 339: 2, 791: 1, 464: 1, 236: 1, 928: 2, 708: 2, 244: 1, 732: 2, 496: 1, 127: 1, 992: 2, 635: 1, 131: 1, 655: 1, 268: 1, 804: 2, 411: 2, 139: 1, 959: 1, 695: 1, 284: 1, 852: 2, 292: 1, 876: 2, 592: 1, 447: 2, 151: 1, 755: 1, 471: 2, 316: 1, 948: 2, 163: 1, 815: 1, 656: 1, 332: 1, 167: 1, 996: 1, 835: 1, 688: 1, 519: 1, 356: 1, 179: 1, 895: 1, 543: 1, 752: 1, 191: 1, 955: 1, 579: 1, 388: 1, 784: 1, 591: 1, 199: 1, 995: 1, 404: 1, 412: 1, 211: 1, 848: 1, 428: 1, 436: 1, 223: 1, 452: 1, 227: 1, 687: 1, 699: 1, 944: 1, 239: 1, 723: 1, 484: 1, 976: 1, 251: 1, 508: 1, 771: 1, 524: 1, 263: 1, 807: 1, 271: 1, 548: 1, 831: 1, 556: 1, 843: 1, 283: 1, 879: 1, 596: 1, 604: 1, 307: 1, 311: 1, 939: 1, 628: 1, 951: 1, 652: 1, 331: 1, 668: 1, 676: 1, 692: 1, 347: 1, 716: 1, 359: 1, 724: 1, 367: 1, 379: 1, 764: 1, 383: 1, 772: 1, 788: 1, 796: 1, 419: 1, 844: 1, 431: 1, 439: 1, 443: 1, 892: 1, 908: 1, 916: 1, 463: 1, 932: 1, 467: 1, 956: 1, 479: 1, 964: 1, 487: 1}
---- 168

{3: 1, 15: 3, 35: 3, 63: 4, 99: 4, 143: 3, 195: 5, 255: 5, 323: 3, 399: 5, 483: 5, 575: 4, 675: 7, 783: 5, 899: 3, 12: 1, 32: 2, 60: 3, 96: 3, 140: 3, 192: 4, 252: 4, 320: 4, 396: 4, 480: 5, 572: 3, 672: 5, 780: 5, 896: 5, 7: 1, 27: 2, 55: 3, 91: 3, 135: 5, 187: 3, 247: 3, 315: 7, 391: 3, 475: 4, 567: 6, 667: 3, 775: 4, 891: 6, 20: 1, 48: 1, 84: 3, 128: 3, 180: 4, 240: 3, 308: 3, 384: 6, 468: 4, 560: 3, 660: 5, 768: 6, 884: 3, 11: 1, 39: 2, 75: 3, 119: 3, 171: 4, 231: 5, 299: 3, 375: 5, 459: 5, 551: 3, 651: 5, 759: 5, 875: 5, 999: 5, 28: 1, 64: 1, 108: 2, 160: 3, 220: 3, 288: 4, 364: 3, 448: 4, 540: 5, 640: 6, 748: 3, 864: 5, 988: 3, 51: 2, 95: 2, 147: 3, 207: 4, 275: 4, 351: 5, 435: 5, 527: 3, 627: 5, 735: 7, 851: 3, 975: 7, 36: 1, 80: 1, 132: 2, 260: 3, 336: 3, 420: 5, 512: 4, 612: 4, 720: 4, 836: 3, 960: 8, 19: 1, 115: 2, 175: 3, 243: 3, 319: 3, 403: 3, 495: 7, 595: 5, 703: 3, 819: 7, 943: 3, 44: 1, 156: 2, 224: 2, 300: 3, 476: 3, 576: 5, 684: 4, 800: 4, 924: 5, 23: 1, 203: 2, 279: 3, 363: 3, 455: 5, 555: 5, 663: 5, 779: 3, 903: 5, 52: 1, 112: 1, 256: 2, 340: 2, 432: 2, 532: 3, 756: 5, 880: 3, 87: 2, 155: 2, 407: 2, 507: 3, 615: 5, 731: 3, 855: 7, 987: 5, 204: 2, 380: 2, 588: 3, 704: 4, 828: 4, 31: 1, 259: 2, 451: 2, 559: 2, 799: 3, 931: 4, 68: 1, 144: 1, 228: 2, 528: 2, 644: 2, 900: 5, 111: 2, 287: 2, 387: 3, 611: 2, 867: 3, 76: 1, 352: 2, 460: 2, 700: 3, 832: 3, 972: 3, 123: 2, 215: 2, 423: 3, 539: 3, 795: 4, 935: 4, 176: 1, 276: 2, 500: 2, 624: 2, 43: 1, 235: 2, 343: 2, 583: 2, 715: 4, 92: 1, 416: 2, 812: 2, 47: 1, 371: 2, 767: 2, 915: 4, 100: 1, 208: 1, 324: 2, 580: 2, 868: 2, 159: 2, 531: 3, 671: 2, 348: 2, 620: 2, 295: 2, 427: 2, 871: 2, 116: 1, 372: 2, 816: 2, 980: 3, 59: 1, 183: 2, 603: 3, 923: 2, 124: 1, 544: 2, 335: 2, 639: 3, 803: 2, 272: 1, 740: 2, 912: 2, 67: 1, 355: 2, 511: 2, 847: 3, 444: 2, 608: 2, 71: 1, 219: 2, 711: 3, 148: 1, 304: 1, 820: 2, 395: 2, 747: 3, 492: 2, 860: 2, 79: 1, 415: 2, 979: 2, 164: 1, 516: 2, 83: 1, 623: 2, 172: 1, 736: 2, 940: 2, 267: 2, 368: 1, 564: 2, 679: 2, 188: 1, 291: 2, 707: 2, 927: 3, 196: 1, 400: 1, 303: 2, 515: 2, 963: 3, 636: 2, 103: 1, 535: 2, 763: 2, 212: 1, 107: 1, 327: 2, 791: 2, 928: 2, 339: 2, 464: 1, 708: 2, 236: 1, 732: 2, 992: 2, 244: 1, 496: 1, 635: 2, 127: 1, 655: 2, 804: 2, 131: 1, 959: 2, 268: 1, 411: 2, 695: 2, 852: 2, 139: 1, 284: 1, 876: 2, 292: 1, 592: 1, 447: 2, 755: 2, 151: 1, 948: 2, 471: 2, 316: 1, 815: 2, 656: 1, 996: 2, 163: 1, 835: 2, 332: 1, 167: 1, 688: 1, 519: 2, 895: 2, 356: 1, 179: 1, 543: 2, 752: 1, 955: 2, 191: 1, 579: 2, 388: 1, 784: 1, 591: 2, 995: 2, 199: 1, 404: 1, 412: 1, 848: 1, 211: 1, 428: 1, 436: 1, 223: 1, 452: 1, 227: 1, 687: 2, 699: 2, 944: 1, 239: 1, 723: 2, 484: 1, 976: 1, 251: 1, 508: 1, 771: 2, 524: 1, 263: 1, 807: 2, 271: 1, 548: 1, 831: 2, 556: 1, 843: 2, 283: 1, 879: 2, 596: 1, 604: 1, 307: 1, 311: 1, 939: 2, 628: 1, 951: 2, 652: 1, 331: 1, 668: 1, 676: 1, 692: 1, 347: 1, 716: 1, 359: 1, 724: 1, 367: 1, 379: 1, 764: 1, 383: 1, 772: 1, 788: 1, 796: 1, 419: 1, 844: 1, 431: 1, 439: 1, 443: 1, 892: 1, 908: 1, 916: 1, 463: 1, 932: 1, 467: 1, 956: 1, 479: 1, 964: 1, 487: 1, 491: 1, 499: 1, 503: 1, 523: 1, 547: 1, 563: 1, 571: 1, 587: 1, 599: 1, 607: 1, 619: 1, 631: 1, 643: 1, 647: 1, 659: 1, 683: 1, 691: 1, 719: 1, 727: 1, 739: 1, 743: 1, 751: 1, 787: 1, 811: 1, 823: 1, 827: 1, 839: 1, 859: 1, 863: 1, 883: 1, 887: 1, 907: 1, 911: 1, 919: 1, 947: 1, 967: 1, 971: 1, 983: 1, 991: 1}
---- 165
'''
import math

limit = 50*pow(10,6)
#limit = 100
#limit = 1000
#limit = 1000000
#limit = 20
ansDic = dict()

for i in range(0, pow(10,60)):
    p = math.ceil(i/2)
    if 4*p*p-i*i >= 2*limit:
        #print("break=",i)
        break
    p = max(p,1)
    for a in range(p, pow(10,60)):
        if 4*a*a-i*i>= limit:
            break
        key = 4*a*a-i*i
        if key <= 0:
            continue
        # 2 * a + i <=a
        #if key == 4:
        #    print(key,2*a+i,2*a-i,a)
        if key not in ansDic:
            ansDic[key] = 0
        if i == 0:
            ansDic[key] += 1
        elif a > i:
            ansDic[key] += 2
        else:
            ansDic[key] += 1
'''
print(ansDic)
for x in range(1,10000):
    
    for a in range(1,1000):
        sn = (x+2*a)*(x+2*a)-x*x-(x+a)*(x+a)
        if sn <= 0:
            continue
        if sn >=limit:
            break
        if sn not in ansDic:
            ansDic[sn]=0
        ansDic[sn]-=1
        if ansDic[sn] < 0:
            print(sn, x+a, x, x-a)


print(ansDic)'''
ansCount = 0
for k,v in ansDic.items():
    if v == 1 and  k > 0 and k < limit:
        #print(k,v)

        ansCount += 1

print('----',ansCount)